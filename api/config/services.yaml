parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    bind:
      $mediaPath: '%env(resolve:SUBDOMAIN)%'

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Api\Action\:
    resource: '../src/Api/Action'
    tags: [ 'controller.service_arguments' ]

  # add JsonExceptionResponseTransformerListener to kernel,
  #   tag  -> priority: 100 para que se ejecute antes que los listeners de symfony
  #   Test -> cmd: sf debug:container | grep JsonException
  App\Api\Listener\JsonExceptionResponseTransformerListener:
    class: App\Api\Listener\JsonExceptionResponseTransformerListener
    tags:
      - {
        name: kernel.event_listener,
        event: kernel.exception,
        method: onKernelException,
        priority: 100
      }

  # Custom JWT payload
  App\Api\Listener\JWTCreatedListener:
    class: App\Api\Listener\JWTCreatedListener
    tags:
      - {
        name: kernel.event_listener,
        event: lexik_jwt_authentication.on_jwt_created,
        method: onJWTCreated
      }

  # Custom JWT response on authentication success
  App\Api\Listener\JWTAuthenticationSuccessListener:
    class: App\Api\Listener\JWTAuthenticationSuccessListener
    tags:
      - {
        name: kernel.event_listener,
        event: lexik_jwt_authentication.on_authentication_success,
        method: onAuthenticationSuccessResponse
      }
  # Service for upload user avatar Amazon S3/ Digital Ocean Cloud
  app.images.s3:
    class: Aws\S3\S3Client
    arguments:
      - version: '%env(resolve:VERSION)%'
        region: '%env(resolve:REGION)%'
        endpoint: '%env(resolve:ENDPOINT)%'
        credentials:
          key: '%env(resolve:KEY)%'
          secret: '%env(resolve:SECRET)%'